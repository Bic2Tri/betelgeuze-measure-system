package main

import (
    "fmt"
    "log"
    "runtime"
    "time"
    
    "betelgeuze-measure-system-main/config"
    "betelgeuze-measure-system-main/devices"
    "betelgeuze-measure-system-main/logging"
    "betelgeuze-measure-system-main/types"
    "betelgeuze-measure-system-main/web"
    "betelgeuze-measure-system-main/utils"
    "math"
    
    "github.com/atotto/clipboard"
    "github.com/micmonay/keybd_event"
)

func main() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.Init()
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    appState := &types.AppState{}
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Arduino
    fmt.Println("üîå –ü–æ–∏—Å–∫ Arduino...")
    arduino, err := devices.ConnectToArduino()
    if err != nil {
        log.Println("Arduino error:", err)
        appState.Status.ArduinoConnected = false
        appState.Status.ArduinoPort = "–ù–µ –Ω–∞–π–¥–µ–Ω"
    } else {
        fmt.Printf("‚úÖ Arduino –ø–æ–¥–∫–ª—é—á–µ–Ω: %s\n", arduino.PortName)
        appState.Arduino = arduino
        appState.Status.ArduinoConnected = true
        appState.Status.ArduinoPort = arduino.PortName
        defer arduino.Port.Close()
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
    fmt.Println("‚öñÔ∏è –ü–æ–∏—Å–∫ –≤–µ—Å–æ–≤...")
    scale, err := devices.ConnectToScale()
    if err != nil {
        log.Println("Scale error:", err)
        appState.Status.ScaleConnected = false
        appState.Status.ScalePort = "–ù–µ –Ω–∞–π–¥–µ–Ω"
    } else {
        fmt.Printf("‚úÖ –í–µ—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: %s\n", scale.PortName)
        appState.Scale = scale
        appState.Status.ScaleConnected = true
        appState.Status.ScalePort = scale.PortName
        defer scale.Connection.Close()
    }
    
    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    go web.StartServer(appState)
    
    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
    if appState.Status.ScaleConnected {
        mainLoop(appState)
    } else {
        log.Println("–í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        select {} // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }
}

func printStatus(state *types.AppState) {
    fmt.Println("üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
    fmt.Printf("üîå Arduino: %s (%s)\n", utils.BoolToString(state.Status.ArduinoConnected), state.Status.ArduinoPort)
    fmt.Printf("‚öñÔ∏è –í–µ—Å—ã: %s (%s)\n", utils.BoolToString(state.Status.ScaleConnected), state.Status.ScalePort)
}

// –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
func simulateKeyPress(result string) error {
    // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    err := clipboard.WriteAll(result)
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: %v", err)
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å —É—á–µ—Ç–æ–º –û–°
    kb, err := keybd_event.NewKeyBonding()
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: %v", err)
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    if runtime.GOOS == "darwin" { // macOS
        kb.HasSuper(true)
    } else { // Windows –∏ Linux
        kb.HasCTRL(true)
    }
    
    kb.SetKeys(keybd_event.VK_V)
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º (–≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    time.Sleep(200 * time.Millisecond)
    
    err = kb.Launching()
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ Ctrl+V: %v", err)
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è Enter
    kbEnter, err := keybd_event.NewKeyBonding()
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è Enter: %v", err)
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
    time.Sleep(100 * time.Millisecond)
    
    kbEnter.SetKeys(keybd_event.VK_ENTER)
    err = kbEnter.Launching()
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ Enter: %v", err)
    }

    return nil
}

func mainLoop(state *types.AppState) {
    var lastWeight float64 = -1 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ç–æ—á–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º
    const weightThreshold = config.WEIGHT_THRESHOLD  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤ –≥—Ä–∞–º–º–∞—Ö)
    
    fmt.Printf("üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ %s\n", runtime.GOOS)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if state.Status.ArduinoConnected && state.Status.ScaleConnected {
        fmt.Println("üîÑ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–æ–ª–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤–µ—Å—ã + Arduino)")
    } else if state.Status.ScaleConnected {
        fmt.Println("‚öñÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –¢–æ–ª—å–∫–æ –≤–µ—Å—ã")
    }
    
    for {
        if !state.Status.ScaleConnected {
            time.Sleep(1 * time.Second)
            continue
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Arduino —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω
        if state.Status.ArduinoConnected {
            devices.SendCommandToArduino(state.Arduino, config.CMD_START)
            time.Sleep(2 * time.Second)
        }

        for {
            weight, err := devices.ReadWeight(state.Scale)
            if err != nil {
                fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Å–∞:", err)
                time.Sleep(1 * time.Second)
                continue
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –±–æ–ª—å—à–µ 0 (–µ—Å—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –≤–µ—Å–∞—Ö)
            if weight <= 0 {
                time.Sleep(1 * time.Second)
                continue
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º –ø–æ—Ä–æ–≥–∞
            if lastWeight > 0 && math.Abs(weight-lastWeight) < weightThreshold {
                time.Sleep(1 * time.Second)
                continue
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å
            lastWeight = weight
            state.Status.LastWeight = weight
            
            fmt.Printf("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: %.1f –≥ (–ø—Ä–µ–¥—ã–¥—É—â–∏–π: %.1f –≥)\n", weight, lastWeight)

            var result string
            
            if state.Status.ArduinoConnected {
                // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: –≤–µ—Å—ã + Arduino
                devices.SendCommandToArduino(state.Arduino, config.CMD_GET_DIMENSIONS)
                length, width, height := devices.GetDimensionsFromArduino(state.Arduino)
                result = fmt.Sprintf("%.0f:%d:%d:%d", weight, length, width, height)
                state.Status.LastDimensions = result
                fmt.Println("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–ª–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è):", result)
            } else {
                // –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –≤–µ—Å–æ–≤
                result = fmt.Sprintf("%.0f", weight)
                state.Status.LastDimensions = result
                fmt.Println("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –≤–µ—Å):", result)
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–≤–æ–¥–∞
            err = simulateKeyPress(result)
            if err != nil {
                log.Printf("–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤–≤–æ–¥–∞: %v", err)
                continue
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            fmt.Println("‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞...")
            time.Sleep(3 * time.Second) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            break
        }

        fmt.Println("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞...")
        time.Sleep(2 * time.Second)
    }
}