package web

import (
    "html/template"
    "net/http"
    
    "betelgeuze-measure-system-main/types"
)

const htmlTemplate = `
<!DOCTYPE html>
<html>
<head>
    <title>–°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .card { background: white; padding: 20px; margin: 10px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .status { display: flex; justify-content: space-between; flex-wrap: wrap; }
        .device { flex: 1; min-width: 300px; margin: 5px; }
        .connected { color: #4CAF50; font-weight: bold; }
        .disconnected { color: #f44336; font-weight: bold; }
        button { background-color: #2196F3; color: white; border: none; padding: 10px 20px; margin: 5px; border-radius: 4px; cursor: pointer; }
        button:hover { background-color: #1976D2; }
        button:disabled { background-color: #ccc; cursor: not-allowed; }
        .commands { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; }
        .command-group { border: 1px solid #ddd; padding: 15px; border-radius: 4px; }
        input, select { padding: 8px; margin: 5px; border: 1px solid #ddd; border-radius: 4px; }
        .response { background-color: #f0f0f0; padding: 10px; margin: 10px 0; border-radius: 4px; min-height: 50px; }
        .log { height: 200px; overflow-y: scroll; background-color: #000; color: #0f0; padding: 10px; font-family: monospace; font-size: 12px; }
        h1 { color: #333; text-align: center; }
        h2 { color: #555; border-bottom: 2px solid #2196F3; padding-bottom: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîß –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞ –∏ —Ä–∞–∑–º–µ—Ä–æ–≤</h1>
        
        <div class="card">
            <h2>üìä –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤</h2>
            <div class="status">
                <div class="device">
                    <h3>Arduino</h3>
                    <p>–°—Ç–∞—Ç—É—Å: <span id="arduino-status" class="disconnected">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                    <p>–ü–æ—Ä—Ç: <span id="arduino-port">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                </div>
                <div class="device">
                    <h3>–í–µ—Å—ã</h3>
                    <p>–°—Ç–∞—Ç—É—Å: <span id="scale-status" class="disconnected">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                    <p>–ü–æ—Ä—Ç: <span id="scale-port">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                </div>
                <div class="device">
                    <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ</h3>
                    <p>–í–µ—Å: <span id="last-weight">-</span> –≥</p>
                    <p>–†–∞–∑–º–µ—Ä—ã: <span id="last-dimensions">-</span></p>
                </div>
            </div>
            <button onclick="reconnectDevices()">üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</button>
        </div>

        <div class="card">
            <h2>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Arduino</h2>
            <div class="commands">
                <div class="command-group">
                    <h3>–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã</h3>
                    <button onclick="sendArduinoCommand('start')">‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç</button>
                    <button onclick="sendArduinoCommand('ping')">üèì –ü–∏–Ω–≥</button>
                    <button onclick="sendArduinoCommand('reset_sensors')">üîÑ –°–±—Ä–æ—Å —Å–µ–Ω—Å–æ—Ä–æ–≤</button>
                    <button onclick="sendArduinoCommand('get_dimensions')">üìè –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã</button>
                </div>
                
                <div class="command-group">
                    <h3>–°–≤–µ—Ç–æ–¥–∏–æ–¥—ã</h3>
                    <button onclick="sendArduinoCommand('led_on')">üí° –í–∫–ª—é—á–∏—Ç—å LED</button>
                    <button onclick="sendArduinoCommand('led_off')">‚ö´ –í—ã–∫–ª—é—á–∏—Ç—å LED</button>
                </div>
                
                <div class="command-group">
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º—É–º–æ–≤</h3>
                    <div>
                        <label>–í—ã—Å–æ—Ç–∞:</label>
                        <input type="number" id="top-max" value="100" min="1" max="255">
                        <button onclick="setTopMax()">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                    <div>
                        <label>–®–∏—Ä–∏–Ω–∞:</label>
                        <input type="number" id="width-max" value="100" min="1" max="255">
                        <button onclick="setWidthMax()">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                    <div>
                        <label>–î–ª–∏–Ω–∞:</label>
                        <input type="number" id="length-max" value="100" min="1" max="255">
                        <button onclick="setLengthMax()">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                </div>
            </div>
            
            <h3>–û—Ç–≤–µ—Ç Arduino:</h3>
            <div id="arduino-response" class="response">–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...</div>
        </div>

        <div class="card">
            <h2>‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞–º–∏ –∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏</h2>
            <div style="display: flex; gap: 10px; flex-wrap: wrap; align-items: center;">
                <button onclick="readWeight()">üìä –°—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Å</button>
                <button onclick="combinedMeasure()" style="background-color: #4CAF50; font-weight: bold;">
                    üéØ –ò–∑–º–µ—Ä–∏—Ç—å –í–°–Å + –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
            
            <h3>–û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã:</h3>
            <div id="scale-response" class="response">–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...</div>
        </div>

        <div class="card">
            <h2>üìù –õ–æ–≥ —Å–∏—Å—Ç–µ–º—ã</h2>
            <div id="system-log" class="log">–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞...\n</div>
        </div>
    </div>

    <script>
        function updateStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('arduino-status').textContent = data.arduino_connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω';
                    document.getElementById('arduino-status').className = data.arduino_connected ? 'connected' : 'disconnected';
                    document.getElementById('arduino-port').textContent = data.arduino_port;
                    
                    document.getElementById('scale-status').textContent = data.scale_connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω';
                    document.getElementById('scale-status').className = data.scale_connected ? 'connected' : 'disconnected';
                    document.getElementById('scale-port').textContent = data.scale_port;
                    
                    document.getElementById('last-weight').textContent = data.last_weight || '-';
                    document.getElementById('last-dimensions').textContent = data.last_dimensions || '-';
                })
                .catch(err => {
                    addLog('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + err);
                });
        }

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ç–æ–∫—É –ª–æ–≥–æ–≤
        function connectToLogs() {
            const eventSource = new EventSource('/logs/stream');
            
            eventSource.onmessage = function(event) {
                const logData = JSON.parse(event.data);
                addLogToDisplay(logData.time, logData.message, logData.type);
            };
            
            eventSource.onerror = function(event) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–≥–∞–º:', event);
                addLogToDisplay(new Date().toLocaleTimeString(), '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–≥–∞–º, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...', 'system');
                setTimeout(connectToLogs, 5000);
            };
        }
        
        function addLogToDisplay(time, message, type) {
            const log = document.getElementById('system-log');
            const colorMap = {
                'arduino': '#00ff00',
                'scale': '#ffff00', 
                'system': '#ffffff'
            };
            const color = colorMap[type] || '#ffffff';
            
            const logEntry = document.createElement('div');
            logEntry.style.color = color;
            logEntry.textContent = '[' + time + '] [' + type.toUpperCase() + '] ' + message;
            
            log.appendChild(logEntry);
            log.scrollTop = log.scrollHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ
            while (log.children.length > 1000) {
                log.removeChild(log.firstChild);
            }
        }

        function reconnectDevices() {
            addLog('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
            fetch('/reconnect', {method: 'POST'})
                .then(response => response.text())
                .then(data => {
                    addLog('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + data);
                    updateStatus();
                })
                .catch(err => {
                    addLog('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + err);
                });
        }

        function sendArduinoCommand(cmd) {
            addLog('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã Arduino: ' + cmd);
            fetch('/arduino/command', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({command: cmd})
            })
            .then(response => response.text())
            .then(data => {
                document.getElementById('arduino-response').textContent = data;
                addLog('–û—Ç–≤–µ—Ç Arduino: ' + data);
            })
            .catch(err => {
                document.getElementById('arduino-response').textContent = '–û—à–∏–±–∫–∞: ' + err;
                addLog('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã Arduino: ' + err);
            });
        }

        function setTopMax() {
            const value = document.getElementById('top-max').value;
            sendArduinoCommand('set_top_max:' + value);
        }

        function setWidthMax() {
            const value = document.getElementById('width-max').value;
            sendArduinoCommand('set_width_max:' + value);
        }

        function setLengthMax() {
            const value = document.getElementById('length-max').value;
            sendArduinoCommand('set_length_max:' + value);
        }

        function readWeight() {
            addLog('–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤–µ—Å–∞...');
            fetch('/scale/read', {method: 'POST'})
                .then(response => response.text())
                .then(data => {
                    document.getElementById('scale-response').textContent = data;
                    addLog('–í–µ—Å: ' + data);
                })
                .catch(err => {
                    document.getElementById('scale-response').textContent = '–û—à–∏–±–∫–∞: ' + err;
                    addLog('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Å–∞: ' + err);
                });
        }

        function combinedMeasure() {
            addLog('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ...');
            const button = event.target;
            button.disabled = true;
            button.textContent = '‚è≥ –ò–∑–º–µ—Ä—è—é...';
            
            fetch('/measure/combined', {method: 'POST'})
                .then(response => response.text())
                .then(data => {
                    document.getElementById('scale-response').textContent = data;
                    addLog('–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: ' + data);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
                    const notification = document.createElement('div');
                    notification.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 1000; background: #4CAF50; color: white; padding: 15px 20px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.3); font-weight: bold;';
                    notification.textContent = '‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!';
                    document.body.appendChild(notification);
                    
                    setTimeout(function() {
                        notification.remove();
                    }, 3000);
                })
                .catch(err => {
                    document.getElementById('scale-response').textContent = '–û—à–∏–±–∫–∞: ' + err;
                    addLog('–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ' + err);
                })
                .finally(() => {
                    button.disabled = false;
                    button.textContent = 'üéØ –ò–∑–º–µ—Ä–∏—Ç—å –í–°–Å + –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
                });
        }        

        function addLog(message) {
            const log = document.getElementById('system-log');
            const time = new Date().toLocaleTimeString();
            log.textContent += '[' + time + '] ' + message + '\n';
            log.scrollTop = log.scrollHeight;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        setInterval(updateStatus, 2000);
        updateStatus();
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—Ç–æ–∫—É –ª–æ–≥–æ–≤
        connectToLogs();
    </script>
</body>
</html>
`

func indexHandler(w http.ResponseWriter, r *http.Request, state *types.AppState) {
    t, _ := template.New("index").Parse(htmlTemplate)
    t.Execute(w, state)
}